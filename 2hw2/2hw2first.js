"use strict";

// Задание 1
// Представьте, что у вас есть класс для управления библиотекой. В этом классе
// будет приватное свойство для хранения списка книг, а также методы для добавления
// книги, удаления книги и получения информации о наличии книги.

// Класс должен содержать приватное свойство #books, которое инициализируется
// пустым массивом и представляет собой список книг в библиотеке.

// Реализуйте геттер allBooks, который возвращает текущий список книг.

// Реализуйте метод addBook(title), который позволяет добавлять книгу в список.
// Если книга с таким названием уже существует в списке, выбросьте ошибку
// с соответствующим сообщением.

// Реализуйте метод removeBook(title), который позволит удалять книгу из списка
// по названию. Если книги с таким названием нет в списке, выбросьте ошибку
// с соответствующим сообщением.

// Реализуйте метод hasBook(title), который будет проверять наличие книги в
// библиотеке и возвращать true или false в зависимости от того, есть ли такая
// книга в списке или нет.

// Реализуйте конструктор, который принимает начальный список книг (массив) в
// качестве аргумента. Убедитесь, что предоставленный массив не содержит дубликатов;
// в противном случае выбрасывайте ошибку.

class Library {
  #books = [];

  get AllBooks() {
    return this.#books;
  }

  addBook(title) {
    if (!this.#books.includes(title)) {
      this.#books.push(title);
    } else {
      console.log("Ошибка: такая книга уже есть в библиотеке.");
      // throw new Error("Ошибка: такая книга уже есть в библиотеке."); - в таком варианте вызовы функций ниже оборвутся, поэтому закоментирован
    }
  }

  removeBook(title) {
    if (this.#books.includes(title)) {
      this.#books = this.#books.filter((item) => item !== title);
    } else {
      console.log("Ошибка: такая книга в библиотеке отсутствует.");
      // throw new Error("Ошибка: такая книга в библиотеке отсутствует."); - в таком варианте вызовы функций ниже оборвутся, поэтому закоментирован
    }
  }

  hasBook(title) {
    return this.#books.includes(title);
  }

  constructor(...items) {
    const bookSet = new Set(items);
    if (bookSet.size === items.length) {
      this.#books = items;
    } else {
      console.log("Ошибка: в вашем списке содержатся дубликаты.");
      // throw new Error("Ошибка: в вашем списке содержатся дубликаты."); - в таком варианте вызовы функций ниже оборвутся, поэтому закоментирован
    }
  }
}

const lib = new Library();
lib.addBook("ggg");
lib.addBook("ada");
lib.addBook("ggg");
console.log(lib.AllBooks);
lib.removeBook("ggg");
console.log(lib.AllBooks);
lib.removeBook("ff");
console.log(lib.AllBooks);
console.log(lib.hasBook("ada"));
console.log(lib.hasBook("ff"));


const lib2 = new Library("ss", "dd", "ss");
const lib3 = new Library("ss", "dd", "фф");
console.log(lib3.AllBooks);


